
;; Function __debugbreak (null)
;; enabled by -tree-original


{
  __asm__ __volatile__("int {$}3"::);
}


;; Function wcsnlen_s (null)
;; enabled by -tree-original


{
  return _src != 0B ? wcsnlen (_src, _count) : 0;
}


;; Function vfscanf (null)
;; enabled by -tree-original


{
  return __ms_vfscanf (__stream, __format, __local_argv);
}


;; Function vsscanf (null)
;; enabled by -tree-original


{
  return __ms_vsscanf (__source, __format, __local_argv);
}


;; Function vscanf (null)
;; enabled by -tree-original


{
  return __ms_vscanf (__format, __local_argv);
}


;; Function vsnprintf (null)
;; enabled by -tree-original


{
  return __ms_vsnprintf (__stream, __n, __format, __local_argv);
}


;; Function snprintf (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  __builtin_va_start ((char * &) &__local_argv, __format);
  __retval = __ms_vsnprintf (__stream, __n, __format, __local_argv);
  __builtin_va_end ((char * &) &__local_argv);
  return __retval;
}


;; Function vfwscanf (null)
;; enabled by -tree-original


{
  return __ms_vfwscanf (__stream, __format, __local_argv);
}


;; Function vswscanf (null)
;; enabled by -tree-original


{
  return __ms_vswscanf (__source, __format, __local_argv);
}


;; Function vwscanf (null)
;; enabled by -tree-original


{
  return __ms_vwscanf (__format, __local_argv);
}


;; Function snwprintf (null)
;; enabled by -tree-original


{
  int r;
  char * argp;

    int r;
    char * argp;
  __builtin_va_start ((char * &) (char * *) &argp, format);
  r = _vsnwprintf (s, n, format, argp);
  __builtin_va_end ((char * &) (char * *) &argp);
  return r;
}


;; Function vsnwprintf (null)
;; enabled by -tree-original


{
  return _vsnwprintf (s, n, format, arg);
}


;; Function vswprintf (null)
;; enabled by -tree-original


{
  return vsnwprintf (__stream, __count, __format, __local_argv);
}


;; Function swprintf (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  __builtin_va_start ((char * &) &__local_argv, __format);
  __retval = vswprintf (__stream, __count, __format, __local_argv);
  __builtin_va_end ((char * &) &__local_argv);
  return __retval;
}


;; Function _abs64 (null)
;; enabled by -tree-original


{
  return ABS_EXPR <x>;
}


;; Function _MarkAllocaS (null)
;; enabled by -tree-original


{
  if (_Ptr != 0B)
    {
      *(unsigned int *) _Ptr = _Marker;
      _Ptr = _Ptr + 16;
    }
  return _Ptr;
}


;; Function _freea (null)
;; enabled by -tree-original


{
  unsigned int _Marker;

    unsigned int _Marker;
  if (_Memory != 0B)
    {
      _Memory = _Memory + 18446744073709551600;
      _Marker = *(unsigned int *) _Memory;
      if (_Marker == 56797)
        {
          free (_Memory);
        }
    }
}


;; Function le_char (null)
;; enabled by -tree-original


{
  char c;

    char c;
  if (fread ((void * restrict) &c, 1, 1, arqin) == 0)
    {
      return -1;
    }
  if (c == 10)
    {
      linlex++ ;
      collex = 1;
    }
  else
    {
      collex++ ;
    }
  return c;
}


;; Function pal_res (null)
;; enabled by -tree-original


{
  int tk = 0;

    int tk = 0;
  goto <D.4921>;
  <D.4920>:;
  if (strcmp ((const char *) lex, (const char *) &reservadas[tk].palavra) == 0)
    {
      return reservadas[tk].token;
    }
  tk++ ;
  <D.4921>:;
  if (strcmp ((const char *) &reservadas[tk].palavra, (const char *) "fim") != 0) goto <D.4920>; else goto <D.4922>;
  <D.4922>:;
  return 28;
}


;; Function le_token (null)
;; enabled by -tree-original


{
  static int pos = 0;
  static int estado = 0;
  static char c = 0;

    static int pos = 0;
    static int estado = 0;
    static char c = 0;
  <D.4932>:;
  switch (estado)
    {
      case 0:;
      if (c == 44)
        {
          c = le_char ();
          return 20;
        }
      if (c == 43)
        {
          c = le_char ();
          return 15;
        }
      if (c == 45)
        {
          c = le_char ();
          return 16;
        }
      if (c == 42)
        {
          c = le_char ();
          return 17;
        }
      if (c == 123)
        {
          c = le_char ();
          return 10;
        }
      if (c == 125)
        {
          c = le_char ();
          return 11;
        }
      if (c == 59)
        {
          c = le_char ();
          return 21;
        }
      if (c == 91)
        {
          c = le_char ();
          return 8;
        }
      if (c == 93)
        {
          c = le_char ();
          return 9;
        }
      if (c == 40)
        {
          c = le_char ();
          return 18;
        }
      if (c == 41)
        {
          c = le_char ();
          return 19;
        }
      if (c == 61)
        {
          c = le_char ();
          if (c == 61)
            {
              c = le_char ();
              return 26;
            }
          return 13;
        }
      if (c == 60)
        {
          c = le_char ();
          if (c == 61)
            {
              c = le_char ();
              return 24;
            }
          return 23;
        }
      if (c == 62)
        {
          c = le_char ();
          if (c == 61)
            {
              c = le_char ();
              return 25;
            }
          return 22;
        }
      if (c == 33)
        {
          c = le_char ();
          if (c == 61)
            {
              c = le_char ();
              return 27;
            }
        }
      if (c > 96 && c <= 122 || c == 95)
        {
          lex[0] = c;
          c = le_char ();
          pos = 1;
          estado = 1;
          goto <D.4929>;
        }
      if (c > 47 && c <= 57)
        {
          lex[0] = c;
          c = le_char ();
          pos = 1;
          estado = 2;
          goto <D.4929>;
        }
      if (c == -1)
        {
          return 12;
        }
      if ((((c == 10 || c == 13) || c == 9) || c == 0) || c == 32)
        {
          c = le_char ();
          goto <D.4929>;
        }
      case 1:;
      if ((c > 96 && c <= 122 || c == 95) || c > 47 && c <= 57)
        {
          lex[pos++ ] = c;
          c = le_char ();
          goto <D.4929>;
        }
      else
        {
          estado = 0;
          lex[pos] = 0;
          return pal_res ((char *) &lex);
        }
      case 2:;
      if (c > 47 && c <= 57)
        {
          lex[pos++ ] = c;
          c = le_char ();
          goto <D.4929>;
        }
      else
        {
          estado = 0;
          lex[pos] = 0;
          return 14;
        }
      <D.4929>:;
    }
  goto <D.4932>;
}


;; Function mostra_t (null)
;; enabled by -tree-original


{
  printf ((const char * restrict) "%s lex=%s na lin %d, col %d\n", (char *) &tokens[token], (char *) &lex, linlex, collex);
}


;; Function Rel (null)
;; enabled by -tree-original


{
  char E1_c[1000];
  char E2_c[1000];
  char R_s[1000];

  printf ((const char * restrict) "Entrei no Rel\n");
    char E1_c[1000];
    char E2_c[1000];
    char R_s[1000];
  if (E ((char *) &E1_c) != 0)
    {
      {
        char op[10];

                char op[10];
        if (token == 22)
          {
            strcpy ((char *) &op, (const char * restrict) ">");
          }
        else
          {
            if (token == 23)
              {
                strcpy ((char *) &op, (const char * restrict) "<");
              }
            else
              {
                if (token == 26)
                  {
                    strcpy ((char *) &op, (const char * restrict) "=");
                  }
                else
                  {
                    if (token == 27)
                      {
                        strcpy ((char *) &op, (const char * restrict) "<>");
                      }
                    else
                      {
                        if (token == 25)
                          {
                            strcpy ((char *) &op, (const char * restrict) ">=");
                          }
                        else
                          {
                            if (token == 24)
                              {
                                strcpy ((char *) &op, (const char * restrict) "<=");
                              }
                          }
                      }
                  }
              }
          }
        printf ((const char * restrict) "Voltei do E, token \xef\xbf\xbd %s op \xef\xbf\xbd %s", (char *) &tokens[token], (char *) &op);
        if (((((token == 22 || token == 23) || token == 26) || token == 27) || token == 25) || token == 24)
          {
            token = le_token ();
            if (E ((char *) &E2_c) != 0)
              {
                printf ((const char * restrict) "Voltei do E2, token \xef\xbf\xbd %s", (char *) &tokens[token]);
                sprintf (Rel_c, (const char * restrict) "%s%s\t%s\n", (char *) &E1_c, (char *) &E2_c, (char *) &op);
                return 1;
              }
            return 0;
          }
        else
          {
            strcpy (Rel_c, (const char * restrict) &E1_c);
            printf ((const char * restrict) "Vou retornar 1 no E\n");
            return 1;
          }
      }
    }
  return 0;
}


;; Function E (null)
;; enabled by -tree-original


{
  char T_c[1000];
  char R_h[1000];
  char R_s[1000];

  printf ((const char * restrict) "Entrei no E\n");
    char T_c[1000];
    char R_h[1000];
    char R_s[1000];
  if (T ((char *) &T_c) != 0)
    {
      strcpy ((char *) &R_h, (const char * restrict) &T_c);
      if (R ((char *) &R_h, (char *) &R_s) != 0)
        {
          strcpy (E_c, (const char * restrict) &R_s);
          printf ((const char * restrict) "Vou retornar 1 no E\n");
          return 1;
        }
    }
  return 0;
}


;; Function R (null)
;; enabled by -tree-original


{
  char T_c[1000];
  char R1_h[1000];
  char R1_s[1000];

  printf ((const char * restrict) "Entrei no R (+TR | -TR)\n");
    char T_c[1000];
    char R1_h[1000];
    char R1_s[1000];
  if (token == 15)
    {
      token = le_token ();
      if (T ((char *) &T_c) != 0)
        {
          strcpy ((char *) &R1_h, (const char * restrict) R_h);
          strcat ((char *) &R1_h, (const char * restrict) &T_c);
          strcat ((char *) &R1_h, (const char * restrict) "\t+\n");
          if (R ((char *) &R1_h, (char *) &R1_s) != 0)
            {
              strcpy (R_s, (const char * restrict) &R1_s);
              return 1;
            }
        }
      return 0;
    }
  if (token == 16)
    {
      token = le_token ();
      if (T ((char *) &T_c) != 0)
        {
          strcpy ((char *) &R1_h, (const char * restrict) R_h);
          strcat ((char *) &R1_h, (const char * restrict) &T_c);
          strcat ((char *) &R1_h, (const char * restrict) "\t-\n");
          if (R ((char *) &R1_h, (char *) &R1_s) != 0)
            {
              strcpy (R_s, (const char * restrict) &R1_s);
              return 1;
            }
        }
      return 0;
    }
  strcpy (R_s, (const char * restrict) R_h);
  printf ((const char * restrict) "Vou retornar 1 no R\n");
  return 1;
}


;; Function T (null)
;; enabled by -tree-original


{
  char F_c[1000];
  char S_h[1000];
  char S_s[1000];

    char F_c[1000];
    char S_h[1000];
    char S_s[1000];
  printf ((const char * restrict) "Entrei no T\n");
  if (F ((char *) &F_c) != 0)
    {
      strcpy ((char *) &S_h, (const char * restrict) &F_c);
      if (S ((char *) &S_h, (char *) &S_s) != 0)
        {
          strcpy (T_c, (const char * restrict) &S_s);
          return 1;
        }
    }
  return 0;
}


;; Function S (null)
;; enabled by -tree-original


{
  char F_c[1000];
  char S1_h[1000];
  char S1_s[1000];

  printf ((const char * restrict) "Entrei no S (*FS)\n");
    char F_c[1000];
    char S1_h[1000];
    char S1_s[1000];
  if (token == 17)
    {
      token = le_token ();
      if (F ((char *) &F_c) != 0)
        {
          strcpy ((char *) &S1_h, (const char * restrict) S_h);
          strcat ((char *) &S1_h, (const char * restrict) &F_c);
          strcat ((char *) &S1_h, (const char * restrict) "\t*\n");
          if (S ((char *) &S1_h, (char *) &S1_s) != 0)
            {
              strcpy (S_s, (const char * restrict) &S1_s);
              return 1;
            }
        }
      return 0;
    }
  strcpy (S_s, (const char * restrict) S_h);
  printf ((const char * restrict) "Vou retornar 1 no S\n");
  return 1;
}


;; Function F (null)
;; enabled by -tree-original


{
  printf ((const char * restrict) "Entrei no F\n");
  if (token == 14)
    {
      strcpy (F_c, (const char * restrict) "\tpush ");
      strcat (F_c, (const char * restrict) &lex);
      strcat (F_c, (const char * restrict) "\n");
      token = le_token ();
      return 1;
    }
  if (token == 28)
    {
      strcpy (F_c, (const char * restrict) "\tvalor-r ");
      strcat (F_c, (const char * restrict) &lex);
      strcat (F_c, (const char * restrict) "\n");
      token = le_token ();
      return 1;
    }
  if (token == 18)
    {
      {
        char E_c[1000];

                char E_c[1000];
        token = le_token ();
        if (E ((char *) &E_c) != 0)
          {
            if (token == 19)
              {
                token = le_token ();
                strcpy (F_c, (const char * restrict) &E_c);
                return 1;
              }
          }
      }
    }
  return 0;
}


;; Function Lista_Com (null)
;; enabled by -tree-original


{
  char LL_c[1000];
  char Com_c[1000];

  printf ((const char * restrict) "Entrei no Lista_Com\n");
    char LL_c[1000];
    char Com_c[1000];
  printf ((const char * restrict) "Vou testar Com - token \xef\xbf\xbd %s\n", (char *) &tokens[token]);
  if (token == 12)
    {
      return 1;
    }
  if (((token != 28 && token != 21) && token != 5) && token != 7)
    {
      strcpy (Lista_Com_c, (const char * restrict) "");
      return 1;
    }
  if (Com ((char *) &Com_c) != 0)
    {
      printf ((const char * restrict) "B - token \xef\xbf\xbd %s\n", (char *) &tokens[token]);
      if (Lista_Com ((char *) &LL_c) != 0)
        {
          strcpy (Lista_Com_c, (const char * restrict) &Com_c);
          strcat (Lista_Com_c, (const char * restrict) &LL_c);
          printf ((const char * restrict) "Vou retornar 1 no Lista_Com. Token \xef\xbf\xbd %s\n", (char *) &tokens[token]);
          return 1;
        }
      printf ((const char * restrict) "Vou retornar 0 no Lista_Com-1 - token \xef\xbf\xbd %s\n", (char *) &tokens[token]);
      return 0;
    }
  if (token == 12)
    {
      return 1;
    }
  printf ((const char * restrict) "Vou retornar 0 no Lista_Com-2\n");
  return 0;
}


;; Function geralabel (null)
;; enabled by -tree-original


{
  static int numlabel = 0;

    static int numlabel = 0;
  sprintf (label, (const char * restrict) "LB%03d", numlabel++ );
}


;; Function Com (null)
;; enabled by -tree-original


{
  char Rel_c[1000];

  printf ((const char * restrict) "Entrei no Com\n");
    char Rel_c[1000];
  if (token == 5)
    {
      {
        char labelelse[10];
        char labelfim[10];

                char labelelse[10];
                char labelfim[10];
        geralabel ((char *) &labelelse);
        geralabel ((char *) &labelfim);
        token = le_token ();
        if (token == 18)
          {
            token = le_token ();
            if (Rel ((char *) &Rel_c) != 0)
              {
                if (token == 19)
                  {
                    {
                      char Com3_c[1000];

                      token = le_token ();
                                            char Com3_c[1000];
                      if (Com ((char *) &Com3_c) != 0)
                        {
                          if (token == 6)
                            {
                              {
                                char Com2_c[1000];

                                token = le_token ();
                                                                char Com2_c[1000];
                                if (Com ((char *) &Com2_c) != 0)
                                  {
                                    sprintf (Com_c, (const char * restrict) "%s\tgofalse %s\n%s\tgoto %s\nrotulo %s\n%srotulo %s", (char *) &Rel_c, (char *) &labelelse, (char *) &Com3_c, (char *) &labelfim, (char *) &labelelse, (char *) &Com2_c, (char *) &labelfim);
                                    return 1;
                                  }
                                else
                                  {
                                    printf ((const char * restrict) "Erro no comando do else\n");
                                    return 0;
                                  }
                              }
                            }
                          else
                            {
                              printf ((const char * restrict) "Esperava palavra else\n");
                              return 0;
                            }
                        }
                      else
                        {
                          printf ((const char * restrict) "Esperava fecha par\xef\xbf\xbdnteses\n");
                          return 0;
                        }
                    }
                  }
                else
                  {
                    printf ((const char * restrict) "Erro na express\xef\xbf\xbdo do if \n");
                    return 0;
                  }
              }
            printf ((const char * restrict) "Esperava abre par\xef\xbf\xbdnteses\n");
            return 0;
          }
        else
          {
            printf ((const char * restrict) "Esperava abre par\xef\xbf\xbdnteses\n");
            return 0;
          }
      }
    }
  if (token == 7)
    {
      {
        char labelinicio[10];
        char labelfim[10];

                char labelinicio[10];
                char labelfim[10];
        geralabel ((char *) &labelinicio);
        geralabel ((char *) &labelfim);
        token = le_token ();
        if (token == 18)
          {
            token = le_token ();
            if (Rel ((char *) &Rel_c) != 0)
              {
                if (token == 19)
                  {
                    {
                      char Com1_c[1000];

                      token = le_token ();
                                            char Com1_c[1000];
                      if (Com ((char *) &Com1_c) != 0)
                        {
                          sprintf (Com_c, (const char * restrict) "rotulo %s\n%s\tgofalse %s\n%s\tgoto %s\nrotulo %s\n", (char *) &labelinicio, (char *) &Rel_c, (char *) &labelfim, (char *) &Com1_c, (char *) &labelinicio, (char *) &labelfim);
                          return 1;
                        }
                      else
                        {
                          printf ((const char * restrict) "Esperava fecha par\xef\xbf\xbdnteses\n");
                          return 0;
                        }
                    }
                  }
                else
                  {
                    printf ((const char * restrict) "Erro na condi\xef\xbf\xbd\xef\xbf\xbdo do while\n");
                    return 0;
                  }
              }
            printf ((const char * restrict) "Esperava abre par\xef\xbf\xbdnteses\n");
            return 0;
          }
        else
          {
            printf ((const char * restrict) "Esperava abre par\xef\xbf\xbdnteses\n");
            return 0;
          }
      }
    }
  else
    {
      if (token == 28)
        {
          {
            char id[10];

                        char id[10];
            strcpy ((char *) &id, (const char * restrict) &lex);
            token = le_token ();
            if (token == 13)
              {
                {
                  char E_c[1000];

                  token = le_token ();
                                    char E_c[1000];
                  if (Rel ((char *) &E_c) != 0)
                    {
                      if (token == 21)
                        {
                          token = le_token ();
                          strcpy (Com_c, (const char * restrict) "\tvalor-l ");
                          strcat (Com_c, (const char * restrict) &id);
                          strcat (Com_c, (const char * restrict) "\n");
                          strcat (Com_c, (const char * restrict) &E_c);
                          strcat (Com_c, (const char * restrict) "\t:=\n\tpop\n");
                          printf ((const char * restrict) "Vou retornar 1 no Com\n");
                          return 1;
                        }
                      else
                        {
                          printf ((const char * restrict) "Faltou ponto-e-v\xef\xbf\xbdrgula ap\xef\xbf\xbds atribui\xef\xbf\xbd\xef\xbf\xbdo\n");
                          return 0;
                        }
                    }
                }
              }
          }
        }
      else
        {
          if (token == 10)
            {
              {
                char Lista_Com_c[1000];

                                char Lista_Com_c[1000];
                token = le_token ();
                printf ((const char * restrict) "Consumi o abre chaves\n");
                if (Lista_Com ((char *) &Lista_Com_c) != 0)
                  {
                    printf ((const char * restrict) "Voltei do Lista_Com. Token=%s\n", (char *) &tokens[token]);
                    if (token == 11)
                      {
                        token = le_token ();
                        printf ((const char * restrict) "Consumi o fecha chaves\n");
                        strcpy (Com_c, (const char * restrict) &Lista_Com_c);
                        return 1;
                      }
                    else
                      {
                        printf ((const char * restrict) "Esperava fecha chaves na linha %d", linlex);
                        return 0;
                      }
                  }
              }
            }
          else
            {
              if (token == 21)
                {
                  printf ((const char * restrict) "Vou retornar 1 no Com com ponto e virgula\n");
                  token = le_token ();
                  return 1;
                }
              else
                {
                  printf ((const char * restrict) "Vou retornar 0 no Com vazio - token \xef\xbf\xbd %s\n", (char *) &tokens[token]);
                  return 1;
                }
            }
        }
    }
}


;; Function main (null)
;; enabled by -tree-original


{
  struct FILE * arqout;
  char Com_C[1000];

    struct FILE * arqout;
    char Com_C[1000];
  if ((arqin = fopen ((const char * restrict) "c:\\teste\\prog.cpp", (const char * restrict) "rt")) == 0B)
    {
      printf ((const char * restrict) "Erro na abertura do arquivo");
      exit (0);
    }
  if ((arqout = fopen ((const char * restrict) "c:\\teste\\saida.kvmp", (const char * restrict) "wt")) == 0B)
    {
      printf ((const char * restrict) "Erro na abertura do arquivo de saida");
      exit (0);
    }
  token = le_token ();
  goto <D.5016>;
  <D.5015>:;
  if (Lista_Com ((char *) &Com_C) == 0)
    {
      printf ((const char * restrict) "Erro no comando!!!\n");
    }
  else
    {
      fprintf (arqout, (const char * restrict) "%s", (char *) &Com_C);
      printf ((const char * restrict) "%s", (char *) &Com_C);
    }
  getch ();
  <D.5016>:;
  if (token != 12) goto <D.5015>; else goto <D.5017>;
  <D.5017>:;
  fclose (arqin);
  fclose (arqout);
  system ((const char *) "pause");
}
return 0;

